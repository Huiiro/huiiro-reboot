version: '3.8'

networks:
  huii-reboot:
    driver: bridge

services:
  # nginx服务
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    networks:
      - huii-reboot
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/cert:/etc/nginx/cert
      - ./nginx/log:/var/log/nginx
      - ./nginx/html:/usr/share/nginx/html
    restart: always
    privileged: true

  # 后端服务
  backend:
    image: huii00147/huii-reboot-backend:1.3.0
    container_name: huii-reboot-backend
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      # redis
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      # datasource
      - SPRING_DATASOURCE_DYNAMIC_DATASOURCE_MASTER_URL=jdbc:postgresql://postgres:5432/huii-reboot
      - SPRING_DATASOURCE_DYNAMIC_DATASOURCE_MASTER_USERNAME=root
      - SPRING_DATASOURCE_DYNAMIC_DATASOURCE_MASTER_PASSWORD=postgres
      # - SPRING_DATASOURCE_DYNAMIC_DATASOURCE_SLAVE_URL=jdbc:postgresql://postgres:5432/huii-reboot
      # - SPRING_DATASOURCE_DYNAMIC_DATASOURCE_SLAVE_USERNAME=root
      # - SPRING_DATASOURCE_DYNAMIC_DATASOURCE_SLAVE_PASSWORD=postgres
      # minio
      - OSS_ENDPOINT=minio:9000
      - OSS_BUCKET=local
      - OSS_ACCESSKEY=minio
      - OSS_SECRETKEY=minioadmin
      - LOCAL_BASEPATH=/huii/data
    networks:
      - huii-reboot
    volumes:
      - ./logs/:/huii/logs/
      - ./data/:/huii/data/
    depends_on:
      - postgres
      - redis
      - minio
    restart: always

  # 前端服务
  frontend:
    image: huii00147/huii-reboot-frontend:1.3.0
    container_name: huii-reboot-frontend
    ports:
      - "5173:5173"
    networks:
      - huii-reboot
    depends_on:
      - backend
      - nginx

  # 依赖服务--postgresql
  postgres:
    image: postgres:14
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: huii-reboot
      POSTGRES_USER: root
      POSTGRES_PASSWORD: postgres
    networks:
      - huii-reboot
    volumes:
      - ./sql/data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "huii-reboot", "-U", "root" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # 依赖服务--mysql
  # todo

  # 依赖服务--redis 单机
  redis:
    image: redis:7
    container_name: redis
    hostname: redis
    ports:
      # windows下会保留6379端口
      - "16379:6379"
    networks:
      - huii-reboot
    volumes:
      - ./redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
      - ./redis/data/:/usr/local/etc/redis/data
    restart: always
    privileged: true
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # 依赖服务--minio 单机
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      # API
      - "9000:9000"
      # CONSOLE
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minioadmin
      #MINIO_SERVER_URL: "https://xxx.com:9000"
      #MINIO_BROWSER_REDIRECT_URL: "https://xxx.com:9001"
    networks:
      - huii-reboot
    volumes:
      - ./minio/data:/data
      - ./minio/config:/root/.minio/
    restart: always
    privileged: true
    command: server --address ':9000' --console-address ':9001' /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live" ]
      interval: 30s
      timeout: 5s
      retries: 3

  # 监控服务 -- springboot admin
  huii-springboot-admin:
    image: huii00147/huii-springboot-admin:1.0.0
    container_name: huii-springboot-admin
    ports:
      - "9100:9180"
    networks:
      - huii-reboot